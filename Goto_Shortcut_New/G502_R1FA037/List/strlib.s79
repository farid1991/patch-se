//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   31/Oct/2019  22:49:23 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  E:\SE\Port\elf2vkp\Goto_Shortcut_New\strlib.c       /
//    Command line    =  E:\SE\Port\elf2vkp\Goto_Shortcut_New\strlib.c -D    /
//                       A2 -D DB3150v1 -D G502_R1FA037 --preprocess=cl      /
//                       E:\SE\Port\elf2vkp\Goto_Shortcut_New\G502_R1FA037\L /
//                       ist\ -lC E:\SE\Port\elf2vkp\Goto_Shortcut_New\G502_ /
//                       R1FA037\List\ -lA E:\SE\Port\elf2vkp\Goto_Shortcut_ /
//                       New\G502_R1FA037\List\ -o                           /
//                       E:\SE\Port\elf2vkp\Goto_Shortcut_New\G502_R1FA037\O /
//                       bj\ -z9 --debug --cpu_mode thumb --endian little    /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --enable_multibytes --fpu None --eec++              /
//                       --preinclude E:\SE\Port\elf2vkp\Goto_Shortcut_New\T /
//                       arget\G502_R1FA037.h -I "E:\SE\Embedded Workbench   /
//                       4.0 Evaluation\ARM\INC\" --inline_threshold=2       /
//    List file       =  E:\SE\Port\elf2vkp\Goto_Shortcut_New\G502_R1FA037\L /
//                       ist\strlib.s79                                      /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME strlib

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC ??StringAlloc
        FUNCTION ??StringAlloc,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??StringAlloc??rA
        PUBLIC ??StringAllocEx
        FUNCTION ??StringAllocEx,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??StringAllocEx??rA
        PUBLIC ??StringExtractFileName
        FUNCTION ??StringExtractFileName,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??StringExtractFileName??rA
        PUBLIC ??StringFree
        FUNCTION ??StringFree,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??StringFree??rA
        PUBLIC ??StringLength
        FUNCTION ??StringLength,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??StringLength??rA
        PUBLIC ??StringRealloc
        FUNCTION ??StringRealloc,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??StringRealloc??rA
        PUBLIC ??StringReallocEx
        FUNCTION ??StringReallocEx,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??StringReallocEx??rA
        MULTWEAK ??malloc??rT
        MULTWEAK ??memset??rT
        MULTWEAK ??mfree??rT
        PUBLIC ??wstr2h
        FUNCTION ??wstr2h,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??wstr2h??rA
        MULTWEAK ??wstrlen??rT
        MULTWEAK ??wstrncpy??rT
        MULTWEAK ??wstrrchr??rT
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        


memset              SYMBOL "memset"
wstrlen             SYMBOL "wstrlen"
wstrncpy            SYMBOL "wstrncpy"
wstrrchr            SYMBOL "wstrrchr"

??StringAlloc??rA   SYMBOL "??rA", ??StringAlloc

??StringAllocEx??rA SYMBOL "??rA", ??StringAllocEx

??StringExtractFileName??rA SYMBOL "??rA", ??StringExtractFileName

??StringFree??rA    SYMBOL "??rA", ??StringFree

??StringLength??rA  SYMBOL "??rA", ??StringLength

??StringRealloc??rA SYMBOL "??rA", ??StringRealloc

??StringReallocEx??rA SYMBOL "??rA", ??StringReallocEx
??malloc??rT        SYMBOL "??rT", ??malloc
??memset??rT        SYMBOL "??rT", memset
??mfree??rT         SYMBOL "??rT", ??mfree

??wstr2h??rA        SYMBOL "??rA", ??wstr2h
??wstrlen??rT       SYMBOL "??rT", wstrlen
??wstrncpy??rT      SYMBOL "??rT", wstrncpy
??wstrrchr??rT      SYMBOL "??rT", wstrrchr

        EXTERN ??malloc
        FUNCTION ??malloc,0202H
        EXTERN ??mfree
        FUNCTION ??mfree,0202H
        EXTERN memset
        FUNCTION memset,0202H
        EXTERN wstrlen
        FUNCTION wstrlen,0202H
        EXTERN wstrncpy
        FUNCTION wstrncpy,0202H
        EXTERN wstrrchr
        FUNCTION wstrrchr,0202H


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        ARM
??StringLength??rA:
        ADD      R12,PC,#+1
        BX       R12
        CFI EndBlock cfiBlock0
        REQUIRE ??StringLength
// E:\SE\Port\elf2vkp\Goto_Shortcut_New\strlib.c
//    1 #include "..\\include\Types.h"
//    2 #include "..\\include\Function.h"
//    3 
//    4 #include "main.h"
//    5 #include "strlib.h"
//    6 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??StringLength
        THUMB
//    7 int StringLength(wchar_t * wstr)
//    8 {
??StringLength:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//    9   if (wstr) return(wstrlen(wstr));
        CMP      R0,#+0
        BEQ      ??StringLength_1
        _BLF     wstrlen,??wstrlen??rT
//   10   else return NULL;
??StringLength_1:
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock1
//   11 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        ARM
??StringFree??rA:
        ADD      R12,PC,#+1
        BX       R12
        CFI EndBlock cfiBlock2
        REQUIRE ??StringFree
//   12 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??StringFree
        THUMB
//   13 void StringFree(wchar_t *wstr)
//   14 {
??StringFree:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   15   if (wstr)
        CMP      R0,#+0
        BEQ      ??StringFree_1
//   16   {
//   17     mfree(wstr);
        _BLF     ??mfree,??mfree??rT
//   18     wstr = NULL;
//   19   }
//   20 }
??StringFree_1:
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        ARM
??StringAlloc??rA:
        ADD      R12,PC,#+1
        BX       R12
        CFI EndBlock cfiBlock4
        REQUIRE ??StringAlloc
//   21 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??StringAlloc
        THUMB
//   22 wchar_t* StringAlloc(int lenght)
//   23 {
??StringAlloc:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//   24   int size = (lenght+1) * sizeof(wchar_t);
        ADDS     R0,R0,#+1
        LSLS     R4,R0,#+1
//   25   wchar_t* wstr = (wchar_t*)malloc(size);
        MOVS     R0,R4
        _BLF     ??malloc,??malloc??rT
        MOVS     R5,R0
//   26   memset(wstr, NULL, size);
        MOVS     R2,R4
        MOVS     R1,#+0
        _BLF     memset,??memset??rT
//   27   return(wstr);
        MOVS     R0,R5
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock5
//   28 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        ARM
??StringAllocEx??rA:
        ADD      R12,PC,#+1
        BX       R12
        CFI EndBlock cfiBlock6
        REQUIRE ??StringAllocEx
//   29 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??StringAllocEx
        THUMB
//   30 void StringAllocEx(wchar_t **wstr, int size)
//   31 {
??StringAllocEx:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOVS     R4,R0
//   32   StringFree((*wstr));
        LDR      R0,[R4, #+0]
        MOVS     R5,R1
        BL       ??StringFree
//   33   (*wstr) = StringAlloc(size);
        MOVS     R0,R5
        BL       ??StringAlloc
        STR      R0,[R4, #+0]
//   34 }
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        ARM
??StringReallocEx??rA:
        ADD      R12,PC,#+1
        BX       R12
        CFI EndBlock cfiBlock8
        REQUIRE ??StringReallocEx
//   35 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??StringReallocEx
        THUMB
//   36 void StringReallocEx(wchar_t *src, wchar_t **dest, int size)
//   37 {
??StringReallocEx:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//   38   StringAllocEx(dest, size);
        MOVS     R1,R6
        MOVS     R0,R5
        BL       ??StringAllocEx
//   39   wstrncpy((*dest), src, size);
        LDR      R0,[R5, #+0]
        MOVS     R2,R6
        MOVS     R1,R4
        _BLF     wstrncpy,??wstrncpy??rT
//   40 }
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        ARM
??StringRealloc??rA:
        ADD      R12,PC,#+1
        BX       R12
        CFI EndBlock cfiBlock10
        REQUIRE ??StringRealloc
//   41 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??StringRealloc
        THUMB
//   42 void StringRealloc(wchar_t *src, wchar_t **dest)
//   43 {
??StringRealloc:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOVS     R4,R0
        MOVS     R5,R1
//   44   StringReallocEx(src, dest, StringLength(src));
        BL       ??StringLength
        MOVS     R2,R0
        MOVS     R1,R5
        MOVS     R0,R4
        BL       ??StringReallocEx
//   45 }
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        ARM
??StringExtractFileName??rA:
        ADD      R12,PC,#+1
        BX       R12
        CFI EndBlock cfiBlock12
        REQUIRE ??StringExtractFileName
//   46 /*            
//   47 void StringFilenameUnion(wchar_t **Filename, wchar_t *Path, wchar_t *Name)
//   48 {
//   49   StringAllocEx(Filename, StringLength(Path) + StringLength(Name) + sizeof(wchar_t)); // + L"/"
//   50   wstrcpy((*Filename), Path);
//   51   wstrcat((*Filename), L"/");
//   52   wstrcat((*Filename), Name);
//   53   *Filename = FSX_MakeFullPath(Path,Name);
//   54 }
//   55 */    

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??StringExtractFileName
        THUMB
//   56 void StringExtractFileName(wchar_t *str, wchar_t **name)
//   57 {
??StringExtractFileName:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOVS     R4,R1
//   58   wchar_t* pos = wstrrchr(str, '/');
        MOVS     R1,#+47
        _BLF     wstrrchr,??wstrrchr??rT
//   59   *pos = NULL;
        MOVS     R1,#+0
        STRH     R1,[R0, #+0]
//   60   StringRealloc(pos+1, name);
        MOVS     R1,R4
        ADDS     R0,R0,#+2
        BL       ??StringRealloc
//   61 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        ARM
??wstr2h??rA:
        ADD      R12,PC,#+1
        BX       R12
        CFI EndBlock cfiBlock14
        REQUIRE ??wstr2h
//   62 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??wstr2h
        THUMB
//   63 int wstr2h(wchar_t * ws, int len)
//   64 {
??wstr2h:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOVS     R2,R0
//   65   u16 w;
//   66   int res=0;
        MOVS     R0,#+0
        B        ??wstr2h_1
//   67   while(len--)
//   68   {
//   69     w=*ws++;
//   70     if ((w>=0x30) && (w<0x40)) w-=0x30;
//   71     else if((w>=0x41) && (w<0x47)) w-=0x37;
//   72     else if((w>=0x61) && (w<0x67)) w-=0x57;
??wstr2h_2:
        CMP      R3,#+97
        BCC      ??wstr2h_3
        CMP      R3,#+103
        BCS      ??wstr2h_3
        SUBS     R3,R3,#+87
??wstr2h_4:
        LSLS     R3,R3,#+16
        LSRS     R3,R3,#+16
//   73     res<<=4;
//   74     res|=w;
??wstr2h_3:
        LSLS     R4,R0,#+4
        MOVS     R0,R3
        ORRS     R0,R0,R4
??wstr2h_1:
        MOVS     R3,R1
        SUBS     R1,R3,#+1
        CMP      R3,#+0
        BEQ      ??wstr2h_5
        LDRH     R3,[R2, #+0]
        ADDS     R2,R2,#+2
        CMP      R3,#+48
        BCC      ??wstr2h_6
        CMP      R3,#+64
        BCS      ??wstr2h_6
        SUBS     R3,R3,#+48
        B.N      ??wstr2h_4
??wstr2h_6:
        CMP      R3,#+65
        BCC      ??wstr2h_2
        CMP      R3,#+71
        BCS      ??wstr2h_2
        SUBS     R3,R3,#+55
        B.N      ??wstr2h_4
//   75   }
//   76   return(res);
??wstr2h_5:
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock15
//   77 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        THUMB
??wstrlen??rT:
        LDR      R3,??Subroutine8_0  ;; wstrlen
        BX       R3
        DATA
??Subroutine8_0:
        DC32     wstrlen
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI NoFunction
        THUMB
??mfree??rT:
        LDR      R3,??Subroutine9_0  ;; ??mfree
        BX       R3
        DATA
??Subroutine9_0:
        DC32     ??mfree
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI NoFunction
        THUMB
??malloc??rT:
        LDR      R3,??Subroutine10_0  ;; ??malloc
        BX       R3
        DATA
??Subroutine10_0:
        DC32     ??malloc
        CFI EndBlock cfiBlock18

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI NoFunction
        THUMB
??memset??rT:
        LDR      R3,??Subroutine11_0  ;; memset
        BX       R3
        DATA
??Subroutine11_0:
        DC32     memset
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon1
        CFI NoFunction
        THUMB
??wstrncpy??rT:
        LDR      R3,??Subroutine12_0  ;; wstrncpy
        BX       R3
        DATA
??Subroutine12_0:
        DC32     wstrncpy
        CFI EndBlock cfiBlock20

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI NoFunction
        THUMB
??wstrrchr??rT:
        LDR      R3,??Subroutine13_0  ;; wstrrchr
        BX       R3
        DATA
??Subroutine13_0:
        DC32     wstrrchr
        CFI EndBlock cfiBlock21

        END
//   78 
// 
// 324 bytes in segment CODE
// 
// 212 bytes of CODE memory (+ 112 bytes shared)
//
//Errors: none
//Warnings: none
